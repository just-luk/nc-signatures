#! /usr/bin/env python
# encoding: utf-8

import os
from waflib.Build import BuildContext


APPNAME = "kodo"
VERSION = "13.1.0"


def options(opt):

    opt.add_option(
        "--all_docs",
        default=False,
        action="store_true",
        help="Generate all documentation versions using giit.",
    )

    opt.add_option(
        "--test_filter",
        default="*.cpp",
        action="store",
        help="Only compile certain tests",
    )


def build(bld):

    # Build static library if this is top-level, otherwise just .o files
    features = ["cxx"]
    if bld.is_toplevel():
        features += ["cxxstlib"]

    # Fix MSVC error C2131 about expression not being constexpr
    cxxflags = []
    compiler_binary = bld.env.get_flat("CXX").lower()
    if "cl.exe" in compiler_binary:
        cxxflags += ["/constexpr:steps10000000"]

    bld(
        features=features,
        source=bld.path.ant_glob("src/**/*.cpp"),
        target="kodo",
        use=["fifi", "recycle_includes", "ranbo_includes", "endian_includes", "bourne"],
        install_path="${PREFIX}/lib",
        cxxflags=cxxflags,
        export_includes=["src"],
    )

    if bld.is_toplevel():

        # Only build tests when executed from the top-level wscript,
        # i.e. not when included as a dependency
        bld.program(
            features="cxx test",
            source=bld.path.ant_glob(
                [
                    "test/kodo_tests.cpp",
                    "test/src/**/{}".format(bld.options.test_filter),
                ]
            ),
            target="kodo_tests",
            use=["kodo", "gtest", "stub_includes"],
        )

        bld.program(
            features="cxx",
            source="examples/hello_world.cpp",
            target="hello_world",
            install_path=None,
            use=["kodo"],
        )

        bld.program(
            features="cxx",
            source="examples/linear_dependency.cpp",
            target="linear_dependency",
            install_path=None,
            use=["kodo"],
        )

        bld.program(
            features="cxx",
            source="examples/perpetual/encode_decode_simple.cpp",
            target="perpetual_encode_decode_simple",
            install_path=None,
            use=["kodo"],
        )

        bld.program(
            features="cxx",
            source="examples/perpetual/workload_distribution.cpp",
            target="perpetual_workload_distribution",
            install_path=None,
            use=["kodo"],
        )

        bld.program(
            features="cxx",
            source="examples/rlnc/encode_decode_simple.cpp",
            target="rlnc_encode_decode_simple",
            install_path=None,
            use=["kodo"],
        )

        bld.program(
            features="cxx",
            source="examples/rlnc/encode_recode_decode_simple.cpp",
            target="rlnc_encode_recode_decode_simple",
            install_path=None,
            use=["kodo"],
        )

        bld.program(
            features="cxx",
            source="examples/rlnc/on_the_fly_repair.cpp",
            target="rlnc_on_the_fly_repair",
            install_path=None,
            use=["kodo"],
        )

        if bld.is_mkspec_platform("linux") or bld.is_mkspec_platform("mac"):

            bld.program(
                features="cxx",
                source="examples/rlnc/udp_receiver.cpp",
                target="rlnc_udp_receiver",
                install_path=None,
                use=["kodo"],
            )

            bld.program(
                features="cxx",
                source="examples/rlnc/udp_sender.cpp",
                target="rlnc_udp_sender",
                install_path=None,
                use=["kodo"],
            )

        bld.program(
            features="cxx",
            source="examples/slide/encode_decode_simple.cpp",
            target="slide_encode_decode_simple",
            install_path=None,
            use=["kodo"],
        )

        bld.program(
            features="cxx",
            source="examples/rs/encode_decode_simple.cpp",
            target="rs_encode_decode_simple",
            install_path=None,
            use=["kodo"],
        )

        bld.program(
            features="cxx",
            source="examples/parity_2d/encode_decode_simple.cpp",
            target="parity_2d_encode_decode_simple",
            install_path=None,
            use=["kodo"],
        )

        bld.program(
            features="cxx",
            source="examples/fulcrum/encode_decode_simple.cpp",
            target="fulcrum_encode_decode_simple",
            install_path=None,
            use=["kodo"],
        )

        bld.program(
            features="cxx",
            source="examples/fulcrum/encode_recode_decode_simple.cpp",
            target="fulcrum_encode_recode_decode_simple",
            install_path=None,
            use=["kodo"],
        )

        bld.program(
            features="cxx",
            source="examples/tutorial/block_basic.cpp",
            target="tutorial_block_basic",
            install_path=None,
            use=["kodo"],
        )

        bld.program(
            features="cxx",
            source="examples/tutorial/block_add_loss.cpp",
            target="tutorial_block_add_loss",
            install_path=None,
            use=["kodo"],
        )

        bld.program(
            features="cxx",
            source="examples/tutorial/block_systematic_coding.cpp",
            target="tutorial_block_systematic_coding",
            install_path=None,
            use=["kodo"],
        )

        bld.program(
            features="cxx",
            source="examples/tutorial/block_recoding.cpp",
            target="tutorial_block_recoding",
            install_path=None,
            use=["kodo"],
        )

        bld.recurse("benchmarks/perpetual")
        bld.recurse("benchmarks/block")
        bld.recurse("benchmarks/slide")
        bld.recurse("benchmarks/fulcrum")

        sourcepath = bld.path.find_node("src")

        bld.install_files(
            dest="${PREFIX}/include",
            files=sourcepath.ant_glob("**/*.hpp"),
            cwd=sourcepath,
            relative_trick=True,
        )

        bld.install_files(dest="${PREFIX}/", files=bld.path.ant_glob("NEWS.rst"))


class ReleaseContext(BuildContext):
    cmd = "prepare_release"
    fun = "prepare_release"


def prepare_release(ctx):
    """Prepare a release."""

    # Rewrite versions
    with ctx.rewrite_file(filename="src/kodo/version.hpp") as f:

        pattern = r"#define STEINWURF_KODO_VERSION v\d+_\d+_\d+"
        replacement = "#define STEINWURF_KODO_VERSION v{}".format(
            VERSION.replace(".", "_")
        )

        f.regex_replace(pattern=pattern, replacement=replacement)

    with ctx.rewrite_file(filename="src/kodo/version.cpp") as f:
        pattern = r'return "\d+\.\d+\.\d+"'
        replacement = 'return "{}"'.format(VERSION)

        f.regex_replace(pattern=pattern, replacement=replacement)


def docs(ctx):
    """Build the documentation in a virtualenv"""

    with ctx.create_virtualenv() as venv:

        # To update the requirements.txt just delete it - a fresh one
        # will be generated from test/requirements.in
        if not os.path.isfile("docs/requirements.txt"):
            venv.run("python -m pip install pip-tools")
            venv.run("pip-compile docs/requirements.in")

        venv.run("python -m pip install -r docs/requirements.txt")

        build_path = os.path.join(ctx.path.abspath(), "build", "site", "docs")

        venv.run(
            "giit clean . --build_path {}".format(build_path), cwd=ctx.path.abspath()
        )
        venv.run(
            "giit sphinx . --build_path {}".format(build_path), cwd=ctx.path.abspath()
        )


class PlotContext(BuildContext):
    cmd = "plot_benchmarks"
    fun = "plot_benchmarks"


def plot_benchmarks(ctx):

    venv = ctx.create_virtualenv(name="virtualenv-plots", overwrite=False)

    if not os.path.isfile("benchmarks/requirements.txt"):
        venv.run("python -m pip install pip-tools")
        venv.run("pip-compile benchmarks/requirements.in")

    venv.run("python -m pip install -r benchmarks/requirements.txt")

    if not os.path.exists("benchmark_results"):
        os.mkdir("benchmark_results")

    # Block benchmark
    venv.run(
        "build_current/benchmarks/block/block_throughput --benchmark_out='benchmark_results/block_throughput.json' --benchmark_counters_tabular=true"
    )
    venv.run(
        "python benchmarks/block/plot.py -i benchmark_results/block_throughput.json"
    )

    # Fulcrum benchmark
    venv.run(
        "build_current/benchmarks/fulcrum/fulcrum_throughput --benchmark_out='benchmark_results/fulcrum_throughput.json' --benchmark_counters_tabular=true"
    )
    venv.run(
        "python benchmarks/fulcrum/plot.py -i benchmark_results/fulcrum_throughput.json"
    )

    # Perpetual benchmark
    venv.run(
        "build_current/benchmarks/perpetual/perpetual_throughput --benchmark_out='benchmark_results/perpetual_throughput.json' --benchmark_counters_tabular=true"
    )
    venv.run(
        "python benchmarks/perpetual/plot.py -i benchmark_results/perpetual_throughput.json"
    )

    # Slide benchmark
    venv.run(
        "build_current/benchmarks/slide/slide_throughput --benchmark_out='benchmark_results/slide_throughput.json' --benchmark_counters_tabular=true"
    )
    venv.run(
        "python benchmarks/slide/plot.py -i benchmark_results/slide_throughput.json"
    )
